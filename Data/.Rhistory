belarus$age <- 2020 -belarus$year_produced
belarus_int_test = belarus
belarus_int_test$manufacturer_name <- as.integer(belarus_int_test$manufacturer_name)
belarus_int_test$transmission <- as.integer(belarus_int_test$transmission)
belarus_int_test$color <- as.integer(belarus_int_test$color)
belarus_int_test$engine_fuel <- as.integer(belarus_int_test$engine_fuel)
belarus_int_test$engine_has_gas <- as.integer(belarus_int_test$engine_has_gas)
belarus_int_test$engine_type <- as.integer(belarus_int_test$engine_type)
belarus_int_test$body_type <- as.integer(belarus_int_test$body_type)
belarus_int_test$has_warranty <- as.integer(belarus_int_test$has_warranty)
belarus_int_test$state <- as.integer(belarus_int_test$state)
belarus_int_test$drivetrain <- as.integer(belarus_int_test$drivetrain)
par(mfrow=c(3,6))
hist(belarus_int_test$price_usd, main = "price_usd", xlab = "price_usd", ylab = "Count", col = "blue", )
hist(belarus_int_test$manufacturer_name, main = "manufacturer_name", xlab = "manufacturer_name", ylab = "Count", col = "blue")
hist(belarus_int_test$transmission, main = "transmission", xlab = "transmission", ylab = "Count", col = "blue")
hist(belarus_int_test$color, main = "color", xlab = "color", ylab = "Count", col = "blue")
hist(belarus_int_test$odometer_value, main = "odometer_value", xlab = "odometer_value", ylab = "Count", col = "blue")
hist(belarus_int_test$age, main = "age", xlab = "age", ylab = "Count", col = "blue", )
hist(belarus_int_test$engine_fuel, main = "engine_fuel", xlab = "engine_fuel", ylab = "Count", col = "blue", )
hist(belarus_int_test$engine_has_gas, main = "engine_has_gas", xlab = "engine_has_gas", ylab = "Count", col = "blue", )
hist(belarus_int_test$engine_type, main = "engine_type", xlab = "engine_type", ylab = "Count", col = "blue", )
hist(belarus_int_test$engine_capacity, main = "engine_capacity", xlab = "engine_capacity", ylab = "Count", col = "blue", )
hist(belarus_int_test$body_type, main = "body_type", xlab = "body_type", ylab = "Count", col = "blue", )
hist(belarus_int_test$has_warranty, main = "has_warranty", xlab = "has_warranty", ylab = "Count", col = "blue", )
hist(belarus_int_test$state, main = "state", xlab = "state", ylab = "Count", col = "blue", )
hist(belarus_int_test$drivetrain, main = "drivetrain", xlab = "drivetrain", ylab = "Count", col = "blue", )
hist(belarus_int_test$number_of_photos, main = "number_of_photos", xlab = "number_of_photos", ylab = "Count", col = "blue", )
hist(belarus_int_test$up_counter, main = "up_counter", xlab = "up_counter", ylab = "Count", col = "blue", )
hist(belarus_int_test$duration_listed, main = "duration_listed", xlab = "duration_listed", ylab = "Count", col = "blue", )
hist(belarus_int_test$features, main = "features", xlab = "features", ylab = "Count", col = "blue", )
belarus$price_usd <- log10(belarus$price_usd+1)
belarus$odometer_value<- log10(belarus$odometer_value+1)
belarus_int_test$price_usd <- log10(belarus_int_test$price_usd+1)
belarus_int_test$odometer_value<- log10(belarus_int_test$odometer_value+1)
par(mfrow=c(1,2))
hist(belarus_int_test$price_usd, main = "price_usd", xlab = "price_usd", ylab = "Count", col = "blue", )
hist(belarus_int_test$odometer_value, main = "odometer_value", xlab = "odometer_value", ylab = "Count", col = "blue")
par(mfrow=c(3,4))
boxplot(belarus$price_usd, main = "price_usd", xlab = "price_usd")
boxplot(belarus$transmission, main = "transmission", xlab = "transmission")
boxplot(belarus$odometer_value, main = "odometer_value", xlab = "odometer_value")
boxplot(belarus$engine_type, main = "engine_type", xlab = "engine_type")
boxplot(belarus$engine_capacity, main = "engine_capacity", xlab = "engine_capacity")
boxplot(belarus$body_type, main = "body_type", xlab = "body_type")
boxplot(belarus$has_warranty, main = "has_warranty", xlab = "has_warranty")
boxplot(belarus$drivetrain, main = "drivetrain", xlab = "drivetrain")
boxplot(belarus$number_of_photos, main = "number_of_photos", xlab = "number_of_photos")
boxplot(belarus$features, main = "features", xlab = "features")
boxplot(belarus$age, main = "age", xlab = "age")
belarus = subset(belarus, price_usd>2.3 & odometer_value>4 & engine_capacity >1 & engine_capacity < 4 & age < 50)
belarus_int_test = subset(belarus_int_test, price_usd>2.3 & odometer_value>4 & engine_capacity >1 & engine_capacity < 4 & age < 50)
boxplot(belarus$price_usd, main = "price_usd", xlab = "price_usd")
boxplot(belarus$odometer_value, main = "odometer_value", xlab = "odometer_value")
boxplot(belarus$engine_capacity, main = "engine_capacity", xlab = "engine_capacity")
boxplot(belarus$age, main = "age", xlab = "age")
cor(belarus_int_test)
belarus= belarus[,-c(1,3,5,6,7,12,16,17)]
set.seed(100)
individual_sample <- sample(2, nrow(belarus), replace=TRUE, prob=c(0.80, 0.20))
train_data <- belarus[individual_sample==1,]
test_data <- belarus[individual_sample==2,]
reg_tree <-rpart(price_usd~., data=train_data ,cp = 0.0001)
printcp(reg_tree)
plotcp(reg_tree)
prune_reg<- prune(reg_tree, cp=0.0005)
prune_reg
tree_prediction <- predict(prune_reg,newdata = train_data)
sum_square_error <- sum((train_data[,"price_usd"]-tree_prediction)^2)
max_sum_of_square <- sum((train_data[,"price_usd"] - mean(train_data[,"price_usd"]))^2)
R_square <- 1 - sum_square_error/max_sum_of_square
R_square
tree_prediction_test <- predict(prune_reg,newdata = test_data)
sum_square_error_test <- sum((test_data[,"price_usd"]-tree_prediction_test)^2)
max_sum_of_square_test <- sum((test_data[,"price_usd"] - mean(test_data[,"price_usd"]))^2)
R_square_test <- 1 - sum_square_error_test/max_sum_of_square_test
R_square_test
RMSE(pred = tree_prediction, obs = test_data$price_usd)
MSE2 <- mean((tree_prediction - test_data$price_usd)^2)
#install.packages("dummies")
rm(list=ls())
library(stringr)
library(corrplot)
library(rpart.plot)
library(rpart)
library(randomForest)
belarus = read.csv("/Users/kalpeshdhande/Desktop/DMML DATASETS/Belarus.csv" , head = TRUE)
str(belarus)
summary(belarus)
belarus_new = belarus[,20:29]
belarus_new$feature<-paste(belarus_new$feature_0,belarus_new$feature_1,belarus_new$feature_2,belarus_new$feature_3,belarus_new$feature_4,belarus_new$feature_5,belarus_new$feature_6,belarus_new$feature_7,belarus_new$feature_8,belarus_new$feature_9,sep=",")
belarus$features <- str_count(belarus_new$feature, 'True')
belarus= belarus[,-c(2,16,17,20:29)]
colSums(is.na(belarus))
belarus <- na.omit(belarus)
belarus$manufacturer_name <- as.factor(belarus$manufacturer_name)
belarus$transmission <- as.factor(belarus$transmission)
belarus$color <- as.factor(belarus$color)
belarus$engine_fuel <- as.factor(belarus$engine_fuel)
belarus$engine_has_gas <- as.factor(belarus$engine_has_gas)
belarus$engine_type <- as.factor(belarus$engine_type)
belarus$body_type <- as.factor(belarus$body_type)
belarus$has_warranty <- as.factor(belarus$has_warranty)
belarus$state <- as.factor(belarus$state)
belarus$drivetrain <- as.factor(belarus$drivetrain)
belarus$age <- 2020 -belarus$year_produced
belarus_int_test = belarus
belarus_int_test$manufacturer_name <- as.integer(belarus_int_test$manufacturer_name)
belarus_int_test$transmission <- as.integer(belarus_int_test$transmission)
belarus_int_test$color <- as.integer(belarus_int_test$color)
belarus_int_test$engine_fuel <- as.integer(belarus_int_test$engine_fuel)
belarus_int_test$engine_has_gas <- as.integer(belarus_int_test$engine_has_gas)
belarus_int_test$engine_type <- as.integer(belarus_int_test$engine_type)
belarus_int_test$body_type <- as.integer(belarus_int_test$body_type)
belarus_int_test$has_warranty <- as.integer(belarus_int_test$has_warranty)
belarus_int_test$state <- as.integer(belarus_int_test$state)
belarus_int_test$drivetrain <- as.integer(belarus_int_test$drivetrain)
par(mfrow=c(3,6))
hist(belarus_int_test$price_usd, main = "price_usd", xlab = "price_usd", ylab = "Count", col = "blue", )
hist(belarus_int_test$manufacturer_name, main = "manufacturer_name", xlab = "manufacturer_name", ylab = "Count", col = "blue")
hist(belarus_int_test$transmission, main = "transmission", xlab = "transmission", ylab = "Count", col = "blue")
hist(belarus_int_test$color, main = "color", xlab = "color", ylab = "Count", col = "blue")
hist(belarus_int_test$odometer_value, main = "odometer_value", xlab = "odometer_value", ylab = "Count", col = "blue")
hist(belarus_int_test$age, main = "age", xlab = "age", ylab = "Count", col = "blue", )
hist(belarus_int_test$engine_fuel, main = "engine_fuel", xlab = "engine_fuel", ylab = "Count", col = "blue", )
hist(belarus_int_test$engine_has_gas, main = "engine_has_gas", xlab = "engine_has_gas", ylab = "Count", col = "blue", )
hist(belarus_int_test$engine_type, main = "engine_type", xlab = "engine_type", ylab = "Count", col = "blue", )
hist(belarus_int_test$engine_capacity, main = "engine_capacity", xlab = "engine_capacity", ylab = "Count", col = "blue", )
hist(belarus_int_test$body_type, main = "body_type", xlab = "body_type", ylab = "Count", col = "blue", )
hist(belarus_int_test$has_warranty, main = "has_warranty", xlab = "has_warranty", ylab = "Count", col = "blue", )
hist(belarus_int_test$state, main = "state", xlab = "state", ylab = "Count", col = "blue", )
hist(belarus_int_test$drivetrain, main = "drivetrain", xlab = "drivetrain", ylab = "Count", col = "blue", )
hist(belarus_int_test$number_of_photos, main = "number_of_photos", xlab = "number_of_photos", ylab = "Count", col = "blue", )
hist(belarus_int_test$up_counter, main = "up_counter", xlab = "up_counter", ylab = "Count", col = "blue", )
hist(belarus_int_test$duration_listed, main = "duration_listed", xlab = "duration_listed", ylab = "Count", col = "blue", )
hist(belarus_int_test$features, main = "features", xlab = "features", ylab = "Count", col = "blue", )
belarus$price_usd <- log10(belarus$price_usd+1)
belarus$odometer_value<- log10(belarus$odometer_value+1)
belarus_int_test$price_usd <- log10(belarus_int_test$price_usd+1)
belarus_int_test$odometer_value<- log10(belarus_int_test$odometer_value+1)
par(mfrow=c(1,2))
hist(belarus_int_test$price_usd, main = "price_usd", xlab = "price_usd", ylab = "Count", col = "blue", )
hist(belarus_int_test$odometer_value, main = "odometer_value", xlab = "odometer_value", ylab = "Count", col = "blue")
par(mfrow=c(3,4))
boxplot(belarus$price_usd, main = "price_usd", xlab = "price_usd")
boxplot(belarus$transmission, main = "transmission", xlab = "transmission")
boxplot(belarus$odometer_value, main = "odometer_value", xlab = "odometer_value")
boxplot(belarus$engine_type, main = "engine_type", xlab = "engine_type")
boxplot(belarus$engine_capacity, main = "engine_capacity", xlab = "engine_capacity")
boxplot(belarus$body_type, main = "body_type", xlab = "body_type")
boxplot(belarus$has_warranty, main = "has_warranty", xlab = "has_warranty")
boxplot(belarus$drivetrain, main = "drivetrain", xlab = "drivetrain")
boxplot(belarus$number_of_photos, main = "number_of_photos", xlab = "number_of_photos")
boxplot(belarus$features, main = "features", xlab = "features")
boxplot(belarus$age, main = "age", xlab = "age")
belarus = subset(belarus, price_usd>2.3 & odometer_value>4 & engine_capacity >1 & engine_capacity < 4 & age < 50)
belarus_int_test = subset(belarus_int_test, price_usd>2.3 & odometer_value>4 & engine_capacity >1 & engine_capacity < 4 & age < 50)
boxplot(belarus$price_usd, main = "price_usd", xlab = "price_usd")
boxplot(belarus$odometer_value, main = "odometer_value", xlab = "odometer_value")
boxplot(belarus$engine_capacity, main = "engine_capacity", xlab = "engine_capacity")
boxplot(belarus$age, main = "age", xlab = "age")
cor(belarus_int_test)
belarus= belarus[,-c(1,3,5,6,7,12,16,17)]
set.seed(100)
individual_sample <- sample(2, nrow(belarus), replace=TRUE, prob=c(0.80, 0.20))
train_data <- belarus[individual_sample==1,]
test_data <- belarus[individual_sample==2,]
reg_tree <-rpart(price_usd~., data=train_data ,cp = 0.0001)
printcp(reg_tree)
plotcp(reg_tree)
par(mfrow=c(1,1))
plotcp(reg_tree)
prune_reg<- prune(reg_tree, cp=0.0005)
prune_reg
tree_prediction <- predict(prune_reg,newdata = test_data)
sum_square_error <- sum((test_data[,"price_usd"]-tree_prediction)^2)
max_sum_of_square <- sum((test_data[,"price_usd"] - mean(test_data[,"price_usd"]))^2)
R_square <- 1 - sum_square_error/max_sum_of_square
R_square
random_forest <- randomForest(price_usd~.,data = train_data,ntree=500)
plotcp(prune_reg)
prune_reg
tree_prediction <- predict(prune_reg,newdata = test_data)
sum_square_error <- sum((test_data[,"price_usd"]-tree_prediction)^2)
max_sum_of_square <- sum((test_data[,"price_usd"] - mean(test_data[,"price_usd"]))^2)
R_square <- 1 - sum_square_error/max_sum_of_square
R_square
random_forest <- randomForest(price_usd~.,data = train_data,ntree=500)
importance(random_forest)
varImpPlot(random_forest)
random_forest
plot(random_forest)
random_forest <- randomForest(price_usd~.,data = train_data,ntree=100)
importance(random_forest)
varImpPlot(random_forest)
random_forest
plot(random_forest)
random_forest_pred <- predict(random_forest,newdata = test_data)
sum_square_error_rf <- sum((test_data[,"price_usd"]-random_forest_pred)^2)
max_sum_of_square_rf <- sum((test_data[,"price_usd"] - mean(test_data[,"price_usd"]))^2)
R_square_rf <- 1 - sum_square_error_rf/max_sum_of_square_rf
R_square_rf
#Installation of used packeages
#install.packages("stringr")
#install.packages("corrplot")
#install.packages("car")
#removing all variable from r to free up the space
#rm(list=ls())
#Loading of libraries
library(stringr)
library(corrplot)
library(car)
library(caret)
#loading of the csv data in pak dataframe
pak = read.csv("/Users/kalpeshdhande/Desktop/DMML DATASETS/pakwheels.csv", head = TRUE)
#Analysing the data and removing NA from data and some irreleavant columns
pak[pak == ""] <- NA
pak[pak == "Call for price" ] <- NA
summary(pak)
sum((is.na(pak)))
colSums(is.na(pak))
pak= pak[,-c(1,5,7,15,16)]
cleanpak <- na.omit(pak)
table(is.na(cleanpak))
summary(cleanpak)
#Transforming some data to factor level data and taking out the insights from the data
cleanpak$Manufacturer=sapply(strsplit(cleanpak$Name,split = " "), `[`, 1)
cleanpak$age_car = 2020 - cleanpak$Model.Year
cleanpak=cleanpak[, -c(1,3)]
cleanpak$Price <- as.integer(cleanpak$Price)
cleanpak$Engine.Type <- as.factor(cleanpak$Engine.Type)
cleanpak$Engine.Capacity <-as.integer(sapply(strsplit(cleanpak$Engine.Capacity,split = " "), `[`, 1))
cleanpak$Transmission <-as.factor(cleanpak$Transmission)
cleanpak$Color <- as.factor(cleanpak$Color)
cleanpak$Assembly <- as.factor(cleanpak$Assembly)
cleanpak$Body.Type <- as.factor(cleanpak$Body.Type)
cleanpak$Manufacturer <- as.factor(cleanpak$Manufacturer)
cleanpak$Features <- str_count(cleanpak$Features, ',') +1
summary(cleanpak)
# Taking testPakInt as new data frame for converting factor data to integer and
#finding out the correlation between the alll variables
testPakInt <-cleanpak
testPakInt$Engine.Type <-as.numeric(testPakInt$Engine.Type)
testPakInt$Transmission <-as.numeric(testPakInt$Transmission)
testPakInt$Color <- as.numeric(testPakInt$Color)
testPakInt$Assembly <- as.numeric(testPakInt$Assembly)
testPakInt$Body.Type <- as.numeric(testPakInt$Body.Type)
testPakInt$Manufacturer <- as.numeric(testPakInt$Manufacturer)
#Plotting Histogram for all the variable avilable in dataset
par(mfrow=c(3,4))
hist(testPakInt$Price, main = "Price", xlab = "Price", ylab = "Count", col = "green", )
hist(testPakInt$Mileage, main = "Mileage", xlab = "Mileage", ylab = "Count", col = "green")
hist(testPakInt$Engine.Type, main = "Engine.Type", xlab = "Engine.Type", ylab = "Count", col = "green")
hist(testPakInt$Engine.Capacity, main = "Engine.Capacity", xlab = "Engine.Capacity", ylab = "Count", col = "green")
hist(testPakInt$Transmission, main = "Transmission", xlab = "Transmission", ylab = "Count", col = "green", )
hist(testPakInt$Color, main = "Color", xlab = "Color", ylab = "Count", col = "green", )
hist(testPakInt$Assembly, main = "Assembly", xlab = "Assembly", ylab = "Count", col = "green", )
hist(testPakInt$Body.Type, main = "Body.Type", xlab = "Body.Type", ylab = "Count", col = "green", )
hist(testPakInt$Features, main = "Features", xlab = "Features", ylab = "Count", col = "green", )
hist(testPakInt$Manufacturer, main = "Manufacturer", xlab = "Manufacturer", ylab = "Count", col = "green", )
hist(testPakInt$age_car, main = "age_car", xlab = "age_car", ylab = "Count", col = "green", )
#Transfoirming some variabels to log function to reduce the skewness in data
cleanpak$Price <- log10(cleanpak$Price)
cleanpak$Engine.Capacity <- log10(cleanpak$Engine.Capacity)
cleanpak$Mileage <- log10(cleanpak$Mileage)
#Transfoirming some variabels to log function to reduce the skewness in data for integer dataset also
testPakInt$Price <- log10(testPakInt$Price)
testPakInt$Engine.Capacity <- log10(testPakInt$Engine.Capacity)
testPakInt$Mileage <- log10(testPakInt$Mileage)
#Plotting Histogram for transformed variable  in dataset
par(mfrow=c(2,2))
hist(testPakInt$Price, main = "Price", xlab = "Price", ylab = "Count", col = "green", )
hist(testPakInt$Engine.Capacity, main = "Engine.Capacity", xlab = "Engine.Capacity", ylab = "Count", col = "green")
hist(testPakInt$Mileage, main = "Mileage", xlab = "Mileage", ylab = "Count", col = "green")
#Plotting graph of independent variable vs dependent variable from dataset to check
#linearity between the variabels
par(mfrow=c(3,4))
plot(x=testPakInt$Mileage, y=cleanpak$Price, xlab="Mileage", ylab="price")
plot(x=testPakInt$Engine.Type, y=cleanpak$Price, xlab="Engine.Type", ylab="price")
plot(x=testPakInt$Engine.Capacity, y=cleanpak$Price, xlab="Engine.Capacity", ylab="price")
plot(x=testPakInt$Transmission, y=cleanpak$Price, xlab="Transmission", ylab="price")
plot(x=testPakInt$Color, y=cleanpak$Price, xlab="Color", ylab="price")
plot(x=testPakInt$Assembly, y=cleanpak$Price, xlab="Assembly", ylab="price")
plot(x=testPakInt$Body.Type, y=cleanpak$Price, xlab="Body.Type", ylab="price")
plot(x=testPakInt$Features, y=cleanpak$Price, xlab="Features", ylab="price")
plot(x=testPakInt$Manufacturer, y=cleanpak$Price, xlab="Manufacturer", ylab="price")
plot(x=testPakInt$age_car, y=cleanpak$Price, xlab="age_car", ylab="price")
#plotting box plot for all variables to check outliers in data
par(mfrow=c(3,4))
boxplot(cleanpak$Price, main = "Price", xlab = "Price")
boxplot(cleanpak$Mileage, main = "Mileage", xlab = "Mileage")
boxplot(cleanpak$Engine.Type, main = "Engine.Type", xlab = "Engine.Type")
boxplot(cleanpak$Engine.Capacity, main = "Engine.Capacity", xlab = "Engine.Capacity")
boxplot(cleanpak$Transmission, main = "Transmission", xlab = "Transmission")
boxplot(cleanpak$Color, main = "Color", xlab = "Color")
boxplot(cleanpak$Assembly, main = "Assembly", xlab = "Assembly")
boxplot(cleanpak$Body.Type, main = "Body.Type", xlab = "Body.Type")
boxplot(cleanpak$Features, main = "Features", xlab = "Features")
boxplot(cleanpak$Manufacturer, main = "Manufacturer", xlab = "Manufacturer")
boxplot(cleanpak$age_car, main = "age_car", xlab = "age_car")
#Applying the outlier removing on datset
cleanpak = subset(cleanpak, Price>5.5 & Price< 7 & Mileage > 4.2 & Mileage < 5.7 & Engine.Capacity > 2.8 & Engine.Capacity < 3.4 )
testPakInt = subset(testPakInt, Price>5.5 & Price< 7 & Mileage > 4.2 & Mileage < 5.7 & Engine.Capacity > 2.8 & Engine.Capacity < 3.4 )
#Plottig graph again for checking how many outliers still present
par(mfrow=c(2,2))
boxplot(cleanpak$Price, main = "Price", xlab = "Price")
boxplot(cleanpak$Mileage, main = "Mileage", xlab = "Mileage")
boxplot(cleanpak$Engine.Capacity, main = "Engine.Capacity", xlab = "Engine.Capacity")
#Finding out the correlation between all variable and removing independent variable
#whose correlation with each other is more than 0.8
cor(testPakInt)
cleanpak= cleanpak[, -c(3,6,8,10)]
#Dividing the data in test data and train data
set.seed(1234)
individual_sample <- sample(2, nrow(cleanpak), replace=TRUE, prob=c(0.80, 0.20))
training_data <- cleanpak[individual_sample==1,]
testing_data <- cleanpak[individual_sample==2,]
#Applying multiple linear regression on the dataset
model <- lm(Price~., data=training_data)
model
summary(model)
par(mfrow=c(2,2))
plot(model)
#Finding out the predictios of the testing dataset
predictions <- model %>% predict(testing_data)
#Finding out RMSE-Root Mean Square Error and RSE - Residual Standard Error - Prediction Error Rate
sigma(model)/mean(testing_data$Price)
RMSE(predictions, testing_data$Price)
#finding out the durbin watson test and vif for checking the assumption of multiple linear regression
durbinWatsonTest(model)
vif(model)
library(stringr)
library(corrplot)
library(mlbench)
library(psych)
library(glmnet)
#loading of the csv data in poland dataframe
poland = read.csv("/Users/kalpeshdhande/Desktop/DMML DATASETS/Polandcars.csv" , head = TRUE)
#Analysing the data and removing NA from data and some irreleavant columns
poland[poland == ""] <- NA
poland$Features[poland$Features == '[]'] <- NA
summary(poland)
colSums(is.na(poland))
poland= poland[,-c(1,3,6,7,8,14,15,20,21,22,23,24)]
colSums(is.na(poland))
#Filling some NA s withe taking out the mean of the varibles from that column
poland$Mileage_km[is.na(poland$Mileage_km)] <- mean(poland$Mileage_km,na.rm = TRUE)
poland$Power_HP[is.na(poland$Power_HP)] <- mean(poland$Power_HP,na.rm = TRUE)
poland$Displacement_cm3[is.na(poland$Displacement_cm3)] <- mean(poland$Displacement_cm3,na.rm = TRUE)
poland$Doors_number[is.na(poland$Doors_number)] <- round(mean(poland$Doors_number,na.rm = TRUE))
colSums(is.na(poland))
poland <- na.omit(poland)
#Transforming some data to factor level data and taking out the insights from the data
poland$Features <- str_count(poland$Features, ',') +1
poland$Vehicle_brand <- as.factor(poland$Vehicle_brand)
poland$Condition <- as.factor(poland$Condition)
poland$Fuel_type <- as.factor(poland$Fuel_type)
poland$Transmission <- as.factor(poland$Transmission)
poland$Type <- as.factor(poland$Type)
poland$Colour <- as.factor(poland$Colour)
poland$Mileage_km <- as.integer(poland$Mileage_km)
poland$Power_HP <- as.integer(poland$Power_HP)
poland$Displacement_cm3 <- as.integer(poland$Displacement_cm3)
poland$age <- 2021 - poland$Production_year
poland= poland[,-4]
# Taking poland_int_test as new data frame for converting factor data to integer and
#finding out the correlation between the alll variables
poland_int_test=poland
poland_int_test$Vehicle_brand <- as.numeric(poland_int_test$Vehicle_brand)
poland_int_test$Condition <- as.numeric(poland_int_test$Condition)
poland_int_test$Fuel_type <- as.numeric(poland_int_test$Fuel_type)
poland_int_test$Transmission <- as.numeric(poland_int_test$Transmission)
poland_int_test$Type <- as.numeric(poland_int_test$Type)
poland_int_test$Colour <- as.numeric(poland_int_test$Colour)
#Plotting Histogram for all the variable avilable in dataset
par(mfrow=c(3,5))
hist(poland_int_test$Price, main = "price", xlab = "price", ylab = "Count", col = "green", )
hist(poland_int_test$Condition, main = "condition", xlab = "condition", ylab = "Count", col = "green")
hist(poland_int_test$Vehicle_brand, main = "vehicle_brand", xlab = "vehicle_brand", ylab = "Count", col = "green")
hist(poland_int_test$age, main = "age", xlab = "age", ylab = "Count", col = "green")
hist(poland_int_test$Mileage_km, main = "Mileage_km", xlab = "Mileage_km", ylab = "Count", col = "green")
hist(poland_int_test$Power_HP, main = "Power_HP", xlab = "Power_HP", ylab = "Count", col = "green", )
hist(poland_int_test$Displacement_cm3, main = "Displacement_cm3", xlab = "Displacement_cm3", ylab = "Count", col = "green", )
hist(poland_int_test$Fuel_type, main = "Fuel_type", xlab = "Fuel_type", ylab = "Count", col = "green", )
hist(poland_int_test$Transmission, main = "Transmission", xlab = "Transmission", ylab = "Count", col = "green", )
hist(poland_int_test$Type, main = "Type", xlab = "Type", ylab = "Count", col = "green", )
hist(poland_int_test$Doors_number, main = "Doors_number", xlab = "Doors_number", ylab = "Count", col = "green", )
hist(poland_int_test$Colour, main = "Colour", xlab = "Colour", ylab = "Count", col = "green", )
hist(poland_int_test$Features, main = "Features", xlab = "Features", ylab = "Count", col = "green", )
#Transfoirming some variabels to log function to reduce the skewness in data
poland$Price <- log10(poland$Price)
poland$age <- log10(poland$age +1)
poland$Mileage_km <- log10(poland$Mileage_km)
poland$Power_HP <- sqrt(poland$Power_HP)
poland$Displacement_cm3 <- log10(poland$Displacement_cm3)
#Transfoirming some variabels to log function to reduce the skewness in data for integer dataset also
poland_int_test$Price <- log10(poland_int_test$Price)
poland_int_test$age <- log10(poland_int_test$age +1)
poland_int_test$Mileage_km <- log10(poland_int_test$Mileage_km)
poland_int_test$Power_HP <- sqrt(poland_int_test$Power_HP)
poland_int_test$Displacement_cm3 <- log10(poland_int_test$Displacement_cm3)
#Plotting Histogram for transformed variable  in dataset
par(mfrow=c(2,3))
hist(poland_int_test$Price, main = "price", xlab = "price", ylab = "Count", col = "green", )
hist(poland_int_test$age, main = "age", xlab = "age", ylab = "Count", col = "green")
hist(poland_int_test$Mileage_km, main = "Mileage_km", xlab = "Mileage_km", ylab = "Count", col = "green")
hist(poland_int_test$Power_HP, main = "Power_HP", xlab = "Power_HP", ylab = "Count", col = "green", )
hist(poland_int_test$Displacement_cm3, main = "Displacement_cm3", xlab = "Displacement_cm3", ylab = "Count", col = "green", )
#plotting box plot for all variables to check outliers in data
par(mfrow=c(3,5))
boxplot(poland$Price, main = "Price", xlab = "Price")
boxplot(poland$Mileage_km, main = "Mileage_km", xlab = "Mileage_km")
boxplot(poland$Displacement_cm3, main = "Displacement_cm3", xlab = "Displacement_cm3")
boxplot(poland$Condition, main = "Condition", xlab = "Condition")
boxplot(poland$Vehicle_brand, main = "Vehicle_brand", xlab = "Vehicle_brand")
boxplot(poland$age, main = "age", xlab = "age")
boxplot(poland$Power_HP, main = "Power_HP", xlab = "Power_HP")
boxplot(poland$Fuel_type, main = "Fuel_type", xlab = "Fuel_type")
boxplot(poland$Transmission, main = "Transmission", xlab = "Transmission")
boxplot(poland$Type, main = "Type", xlab = "Type")
boxplot(poland$Doors_number, main = "Doors_number", xlab = "Doors_number")
boxplot(poland$Colour, main = "Colour", xlab = "Colour")
boxplot(poland$Features, main = "Features", xlab = "Features")
#Applying the outlier removing on datset
poland = subset(poland, Price>3.2 & Price< 6 & Power_HP>5 & Power_HP<17 )
poland_int_test = subset(poland_int_test, Price>3.2 & Price< 6 & Power_HP>5 & Power_HP<17 )
#Plottig graph again for checking how many outliers still present
par(mfrow=c(1,2))
boxplot(poland$Price, main = "Price", xlab = "Price")
boxplot(poland$Power_HP, main = "Power_HP", xlab = "Power_HP")
#Dividing the data in test data and train data
set.seed(123)
individual_sample <- sample(2, nrow(poland), replace=TRUE, prob=c(0.80, 0.20))
train_data <- poland[individual_sample==1,]
test_data <- poland[individual_sample==2,]
# creating the x and y variable form the given dataset as x is all indepednt variable
# and y are all dependent variabel
x_train_data<- model.matrix(Price~., data = train_data)[,-1]
y_train_data <- train_data$Price
x_test_data <- model.matrix(Price~., data= test_data)[,-1]
y_test_data<- test_data$Price
#creating grid of lambdas for hyper tunning
grid_lambdas <- 10^seq(2, -3, length =100)
#building ridge regression model using glmnet library
lm_ridge_reg = glmnet(x_train_data, y_train_data, alpha = 0, family = 'gaussian', lambda = grid_lambdas)
#finding out the optimum lambda for the ridge regression
cv_ridge_reg <- cv.glmnet(x_train_data, y_train_data, alpha = 0, lambda = grid_lambdas)
optimal_lambda <- cv_ridge_reg$lambda.min
optimal_lambda
par(mfrow=c(1,1))
plot(cv_ridge_reg)
plot(lm_ridge_reg)
# finding out the RMSE-Root Mean Square Error and R square value
eval_results <- function(true, predicted, df) {
SSE <- sum((predicted - true)^2)
SST <- sum((true - mean(true))^2)
R_square <- 1 - SSE / SST
RMSE = sqrt(SSE/nrow(df))
data.frame(
RMSE = RMSE,
Rsquare = R_square
)
}
predictions_train <- predict(lm_ridge_reg, s = optimal_lambda, newx = x_train_data)
predictions_test <- predict(lm_ridge_reg, s = optimal_lambda, newx = x_test_data)
eval_results(y_train_data, predictions_train, train_data)
eval_results(y_test_data, predictions_test, test_data)
#building lasso regression model using glmnet library
lm_lasso_reg <- glmnet(x_train_data, y_train_data, alpha = 1, lambda = grid_lambdas)
#finding out the lambda best for the ridge regression
cv_fit_lasso_reg <- cv.glmnet(x_train_data, y_train_data, alpha = 1, lambda = grid_lambdas)
lambda_best <- cv_fit_lasso_reg$lambda.min
lambda_best
plot(cv_fit_lasso_reg)
predictions_train <- predict(lm_lasso_reg, s = lambda_best, newx = x_train_data)
predictions_test <- predict(lm_lasso_reg, s = lambda_best, newx = x_test_data)
eval_results(y_train_data, predictions_train, train_data)
eval_results(y_test_data, predictions_test, test_data)
#Loading of libraries
library(stringr)
library(corrplot)
library(rpart.plot)
library(rpart)
library(randomForest)
library(caret)
#loading of the csv data in belarus dataframe
belarus = read.csv("/Users/kalpeshdhande/Desktop/DMML DATASETS/Belarus.csv" , head = TRUE)
#Analysing the data and removing NA from data and some irreleavant columns
summary(belarus)
belarus_new = belarus[,20:29]
belarus_new$feature<-paste(belarus_new$feature_0,belarus_new$feature_1,belarus_new$feature_2,belarus_new$feature_3,belarus_new$feature_4,belarus_new$feature_5,belarus_new$feature_6,belarus_new$feature_7,belarus_new$feature_8,belarus_new$feature_9,sep=",")
belarus$features <- str_count(belarus_new$feature, 'True')
belarus= belarus[,-c(2,16,17,20:29)]
colSums(is.na(belarus))
belarus <- na.omit(belarus)
#Transforming some data to factor level data and taking out the insights from the data
belarus$manufacturer_name <- as.factor(belarus$manufacturer_name)
belarus$transmission <- as.factor(belarus$transmission)
belarus$color <- as.factor(belarus$color)
belarus$engine_fuel <- as.factor(belarus$engine_fuel)
belarus$engine_has_gas <- as.factor(belarus$engine_has_gas)
belarus$engine_type <- as.factor(belarus$engine_type)
belarus$body_type <- as.factor(belarus$body_type)
belarus$has_warranty <- as.factor(belarus$has_warranty)
belarus$state <- as.factor(belarus$state)
belarus$drivetrain <- as.factor(belarus$drivetrain)
belarus$age <- 2020 -belarus$year_produced
# Taking belarus_int_test as new data frame for converting factor data to integer and
#finding out the correlation between the alll variables
belarus_int_test = belarus
belarus_int_test$manufacturer_name <- as.integer(belarus_int_test$manufacturer_name)
belarus$engine_type <- as.factor(belarus$engine_type)
